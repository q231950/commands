node {
    stage("Clone") {
        checkout scm
    }

    stage("Build") {
        sh 'swift build'
        sh 'swift package generate-xcodeproj'

        sh "xcodebuild build-for-testing -scheme 'Commands-Package' -configuration 'Debug' -derivedDataPath './derived_data'"
    }

    stage("Find Test Targets") {
        // find the file paths of the files which have changed with this commit?? should be all files in this pr!
        def filePaths = []
        def changeLogSets = currentBuild.changeSets
        for (int i = 0; i < changeLogSets.size(); i++) {
            def entries = changeLogSets[i].items
            for (int j = 0; j < entries.length; j++) {
                def entry = entries[j]
                echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
                def files = new ArrayList(entry.affectedFiles)
                for (int k = 0; k < files.size(); k++) {
                    def file = files[k]
                    echo "  ${file.editType.name} ${file.path}"
                    filePaths << file.path
                }
            }
        }

        def paths = filePaths.join(",")
        echo paths
        sh 'which swift'
        sh 'ls -la'
        sh "swift ./test-target-resolver.swift ${ paths }"
    }

    stage("Test") {
        try {
            sh "xcodebuild test-without-building -scheme 'Commands-Package' -configuration 'Debug' -derivedDataPath './derived_data' -only-testing:CommandsTests"
        } catch (error) {
            echo 'test-without-building did not return with status 0'
            echo "${error}"
        } finally {
            echo 'Run Trainer'
            sh '/usr/local/bin/bundler install --path vendor/bundle'
            sh '/usr/local/bin/bundler exec trainer --path ./derived_data/Logs/Test'
        }
    }

    stage("Collect results") {
        junit 'derived_data/Logs/Test/*.xml'
    }

    stage("CLeanup") {
        sh 'git clean -dfx derived_data/Logs'
    }
}
